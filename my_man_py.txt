Виртуальное окружение
python -m venv venv - в папке проекта создает /venv куда будут скидываться библиотеки
source venv/bin/activate - активация


Узнать тип данных
type(имя_переменной) - вывести тип данных переменной

\ - экранирование
двойные кавычки внутри строки можно

Комментирование
#......
"""........."""

f-строки 
print(f"{p}")
print("{} - {}".format(a,b))


Округлениие
round (число, кол-во_знаков)

import math
math.ceil(float) - округляет до большего
    .floor(float) - до меньшего


Герерация последовательности чисел
range (начало, конец, шаг)

Узнать длинну - len()

Найти в тексте:
"ghjj" in text

Тестовые функции:
text.lower()
    .upper()
    .replace("jhg","iu")
    .split - разделить

Индексы
Можно считать индексы с конца [-1]
[начало : конец : шаг]


Рандомайзер
import random

random.random() — возвращает псевдослучайное число от 0.0 до 1.0
random.randint(<Начало>, <Конец>) — возвращает псевдослучайное целое число в диапазоне от <Начало> до <Конец>


PRINT
print(нечто, end="") - если end не указывать, то подставится \n


СПИСКИ
l = [] - создание списка
l = list() - создание списка
print (*l) - звездочка помогает распечатать без квадратных кавычек 

.append() - добавляет элемент
.pop() - удаляет элемент (последний по умолчанию). Возвращает значение
срезы:
[x:y:z]
x - от
y - до
z - шаг

КОРТЕЖ - неизменяемый список
t=(1,2,3) если кортеж из одного символа, то после него ставится ","


СЛОВАРЬ
dict = {k:v}
dict = {1 : ¨a¨, 2 : "b"}
dict [3] = "c"
del [key] - удалить элемент
dicytonary.items() выводит словарь, каждая пара ключ-значение в виде кортежа


МНОЖЕСТВА - не индексируется
set = set()
{}
.add - добавить
.remove - удалить
.discard - удалить, проверив перед этим есть это значение
.clear - очистить
операции со множествами:
.copy - копирование
.union - объединение
.intersection - пересечение
.difference - разность
frozenset() - заморозить множество


string.
import
string.puncuation - все знаки препинания.
                 .replace() - исключить из коллекции puncuation символ ....


Модуль (матем)
abs(int)

Функции.
def
(*args) - принимает неограниченное кол-во аргументов

Модули
Отдельные файлы.
import <file> [as <alias>]


Функции высшего порядка
1. map - принимаает в качестве аргумента функцию и применяет ее к каждому элементу коллекции
map(функция, коллекция)

2. filter 

1. map - принимаает в качестве аргумента функцию и проверяет каждый элемент коллекции на истинность.
Если true - то пропускает дальше, false - нет.
filter(функция, коллекция)

2. enumerate - присобачивает к коллекции слева индекс и возвращает коллекцию в виде кортежей.
enumerate(коллекция, [с какого номера начинать])

4. zip - соединяет попарно элементы из нескольких коллекций в кортежи
zip(коллекция1, коллекция2, ...) - работает по меньшей коллекции.
zip_longest from itertools работает по большей.


Лямбда функция.
Анонимная. Вход : выход


Работа с файлами.
open("file-name". "w", encoding="utf-8")
потом файл нужно закрыть/

with open("file-name". "w", encoding="utf-8") as my_file:
    my_file.write("Бла-бла=бла")


Аналитика данных:
pandas - Python Data Analysis Library
pandas.
    .read_csv('file') - считать куда-то файл
    .head() - названия столбцов и 5 первых строк значений
    .tail() - 5 последних строк
    .shape - возвращает кол-во строк и столбцов в таблице
    .isnull() - проверяет, есть ли незаполненные поля в таблице
    .sum() - суммирует все значения в ячейке
    .dtypes - узнать тип данных столбца
    .columns() - возвращает перечень названий столбцов
    .describe() - дает статистику значений в столбце (мин, макс и пр.)
    .loc[условие, столбец] - разбиение столбца по параметру (добавляет новый столбец)

seaborn - библиотека для построения стат диаграмм
    .scatterplot(data=где_данные, x="столбец1", y="столбец2", [hue='столбец3'(оттенок)], [size=  (размер точек)]) - диаграмма рассеяния
    .relplot(x, y, kind, data) - литейный график
    .histplot(data, x) - гистограмма

matplotlib - библиотека визуплизации графиков
    .pyplot - для визуализации
    .show() - прописываю для показа самого графика



